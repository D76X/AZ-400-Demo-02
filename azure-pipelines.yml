# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

stages:
  - stage: CI
    displayName: CI Stage
    jobs:
      - job: Build  
        displayName: Build_the_imgages_and_push_them_to_the_ACR     
        pool:
          vmImage: ubuntu-latest

        variables:  
        # ----------------------------------------------------
        # Azure DevOps Pipelines devices
        # enable this to print debug info to the Azure DevOps Pipelines console
        # system.debug: true   
        # ----------------------------------------------------
          buildConfiguration: 'Release'
          # --------------------------------------------------
          # the following are for Docker          
          imageRepository: 'webapps'          
          dockerfilePath: '$(Build.SourcesDirectory)/WebApp1/Dockerfile'
          tag : '$(Build.BuildId)'
          #containerRegistry: 'acraz400demox.azurecr.io'
          containerRegistry: '$(containerRegistryServiceConnection)'          
        # ----------------------------------------------------
  
        steps:
        
        - task: Bash@3
          displayName: Print Relevant Variables Values
          inputs:
             targetType: 'inline'
             script: |
               echo "System.Debug=$(System.Debug)"
               echo "Build.Repository.LocalPath=$(Build.Repository.LocalPath)"
          #displayName: Print Variables of imported Variable Groups
          #name: PrintVariableGroupsVariables
          #inputs:
          #    targetType: 'inline'
          #    script: |
          #      echo "System.Debug=$(System.Debug)"
          #      echo "KeyStoreAlias=$(KeyStoreAlias)"
          #      echo "SonarCloudOrganization=$(SonarCloudOrganization)"
          #      echo "SonarCloudProjectKey=$(SonarCloudProjectKey)"
          #      echo "SonarCloudProjectName=$(SonarCloudProjectName)"

        # https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/use-dotnet-v2?view=azure-pipelines
        # We want to build WebApp1 from source code on this ubuntu-latest agent but it does not come with a .Net SDK
        # by default thus we use this task to install the required SDK on the agent
        # However, it may be that on ubuntu-latest agent the .Net SDK 6.x is already installed these days
        # an therefore the following task may not be necessary. It is left as comment as a remeinder of the
        # fact that on a Linux agent you must take care of verifying whether the build tools you need are
        # present as a default or not and in the latter you must installed them in steps of the pipeline.
        # --------------------------------------------------------------------------
        #- task: UseDotNet@2 
        #  displayName: Install .Net Core 6 SDK  
        #  inputs:
        #    packageType: 'sdk'
        #    version: '6.x'
        # --------------------------------------------------------------------------

        # https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/dotnet-core-cli-v2?view=azure-pipelines
        - task: DotNetCoreCLI@2
          displayName: Build WebApp1 with the .Net Core SDK   
          inputs:
            command: 'custom'
            custom: 'build'
            arguments: '--configuration $(buildConfiguration)'
            projects: '**/WebApp1/*.csproj'

        - task: DotNetCoreCLI@2
          displayName: Publish WebApp1 with the .Net Core SDK   
          inputs:            
            command: 'publish'
            arguments: '--configuration $(buildConfiguration) --no-build --output $(Build.ArtifactStagingDirectory)'
            projects: '**/WebApp1/*.csproj'
            # in this case we want to publish a specific web project in the WebApp1 subfolder
            publishWebProjects: false 
            # in this case we want the publish to leave the folder with the published content unzipped
            zipAfterPublish: false  
            # Add project's folder name to publish path boolean. Optional. Use when command = publish. Default value: true.
            modifyOutputPath: true 

        # https://stackoverflow.com/questions/71728509/azure-devops-powershell-not-showing-file-names-for-get-childitem
        # https://cosmin-vladutu.medium.com/azuredevops-list-files-and-folders-676386d8a2bd 
        - powershell: |
           Write-Host "Content of $(Build.SourcesDirectory)"
           Get-ChildItem -Path $(Build.SourcesDirectory)\*.* -Recurse -Force | Out-String -Width 160
          errorActionPreference: continue
          displayName: 'pwsh Get-ChildItem of $(Build.SourcesDirectory)'
          continueOnError: true

        - powershell: |
           Write-Host "Content of $(Build.ArtifactStagingDirectory)"
           Get-ChildItem -Path $(Build.ArtifactStagingDirectory)\*.* -Recurse -Force | Out-String -Width 160
          errorActionPreference: continue
          displayName: 'pwsh Get-ChildItem of $(Build.ArtifactStagingDirectory)'
          continueOnError: true

        ## https://cosmin-vladutu.medium.com/azuredevops-list-files-and-folders-676386d8a2bd 
        #- powershell: |
        #   Write-Host "Show all folder content ArtifactStagingDirectory"
        #   Get-ChildItem -Path $(Build.ArtifactStagingDirectory)\*.* -Recurse -Force
        #  errorActionPreference: continue
        #  displayName: 'PowerShell Script List folder structure $(Build.ArtifactStagingDirectory)'
        #  continueOnError: true

        ## https://praveenkumarsreeram.com/2022/10/24/azure-devops-tips-and-tricks-15-working-with-the-magic-folders-a-b-and-s-in-the-azure-devops-agents/ 
        #- task: PowerShell@2
        #  displayName: List all Folders in $(System.DefaultWorkingDirectory)
        #  inputs:
        #    targetType: 'inline'
        #    pwsh: true
        #    script: |
        #      Get-ChildItem -path $(System.DefaultWorkingDirectory) -recurse

        ## https://techcommunity.microsoft.com/t5/azure-devops/azure-devops-how-to-monitor-the-files-amp-folders-placed-into/m-p/2481508
        #- powershell: |
        #   Write-Host "Show all folder content"
        #   Get-ChildItem -Path $(Agent.WorkFolder)\*.* -Recurse -Force
        #  errorActionPreference: continue
        #  displayName: 'PowerShell Script List folder structure $(Agent.WorkFolder)'
        #  continueOnError: true

        ## https://stackoverflow.com/questions/63117797/azure-pipelines-is-there-a-way-to-view-the-folder-structure
        ## https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/cmd-line-v2?view=azure-pipelines&tabs=yaml&viewFallbackFrom=azure-devops  
        #- task: CmdLine@2
        #  displayName: show folder structure on agent
        #  inputs:
        #    script: echo "Structure of work folder of this pipeline:"
        #      tree $(Agent.WorkFolder)\1 /f
        #      echo "Build.ArtifactStagingDirectory:" 
        #      echo "$(Build.ArtifactStagingDirectory)"
        #      echo "Build.BinariesDirectory:" 
        #      echo "$(Build.BinariesDirectory)"
        #      echo "Build.SourcesDirectory:"
        #      echo "$(Build.SourcesDirectory)"

        # Docker@2 task from the pipeline editor
        #- task: Docker@2
        #  inputs:            
        #    repository: 'webapps'
            #command: 'buildAndPush'
            #buildContext: '$(Build.ArtifactStagingDirectory)/WebApp1' #Default value: ** > Pass ** to indicate the directory that contains the Docker file.
            #string. Required when command = build || command = buildAndPush. Default value: **/Dockerfile.
            #Dockerfile: 'WebApp1/Dockerfile'
            #Dockerfile: '**/WebApp1/Dockerfile'
            #Dockerfile: '$(Build.Repository.LocalPath)/WebApp1/Dockerfile'
            #Dockerfile: '$(Build.Repository.LocalPath)/WebApp1/Dockerfile'
            #Dockerfile: '$(Build.SourcesDirectory)/WebApp1/Dockerfile'
            #Dockerfile: '$(Build.ArtifactStagingDirectory)/WebApp1/Dockerfile'
            #containerRegistry: 'containerRegistryServiceConnection'
            #Dockerfile: '**/Dockerfile'  
            #sourceFolder: '$(Build.Repository.LocalPath)/ArmTemplates/bin/Release/'

        # https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/docker-v2?view=azure-pipelines&tabs=yaml
        #- task: Docker@2
        #  displayName: Login to ACR
        #  inputs:
        #    command: login
        #    containerRegistry: dockerRegistryServiceConnection1
        #- task: Docker@2
        #  displayName: Login to Docker Hub
        #  inputs:
        #    command: login
        #    containerRegistry: dockerRegistryServiceConnection2
        #- task: Docker@2
        #  displayName: Build and Push
        #  inputs:
        #    command: buildAndPush
        #    repository: contosoRepository # username/contosoRepository for DockerHub
        #    tags: |
        #      tag1
        #      tag2  
        # ----------------------------------------------------------------------------        
        #- task: Docker@2
        #  displayName: Build and Push an image to Azure Container Registry
        #  inputs:
        #    command: buildAndPush
        #    repository: $(imageRepository)
        #    dockerFile: $(dockerfilePath)            
        #    #containerRegistry: $(containerRegistry)
        #    containerRegistry: $(containerRegistryServiceConnection)
        #    tags: |
        #      $(tag)
        # ----------------------------------------------------------------------------
            

        #- script: echo Hello, world!
        #  displayName: 'Run a one-line script'

        #- script: |
        #    echo Add other tasks to build, test, and deploy your project.
        #    echo See https://aka.ms/yaml
        #  displayName: 'Run a multi-line script'

  - stage: CD
    displayName: CD Stage
    jobs:
      - job: Deploy 
        displayName: Deploy_containers_from_the_ACR_to_the_corresponding_container_services_on_Azure   
        pool:
          vmImage: ubuntu-latest

        steps:
        - script: echo Hello, world!
          displayName: 'Run a one-line script'

        - script: |
            echo Add other tasks to build, test, and deploy your project.
            echo See https://aka.ms/yaml
          displayName: 'Run a multi-line script'
